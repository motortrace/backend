generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Profile - extends Supabase auth.users
model UserProfile {
  id             String        @id @default(cuid())
  supabaseUserId String        @unique // Links to auth.users.id
  email          String        @unique
  name           String?
  phone          String?
  role           UserRole       @default(CUSTOMER)
  profileImage   String?
  isRegistrationComplete Boolean @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  customer       Customer?
}

model StaffMember {
  id             String        @id @default(cuid())
  supabaseUserId String        @unique
  email          String        @unique
  role           StaffRole
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  workOrders     WorkOrder[]   @relation("TechnicianWorkOrders")
}

model Customer {
  id          String        @id @default(cuid())
  userProfile UserProfile   @relation(fields: [userProfileId], references: [id])
  userProfileId String      @unique
  name        String
  email       String?       @unique
  phone       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  vehicles    Vehicle[]
  workOrders  WorkOrder[]
}

model Vehicle {
  id           String        @id @default(cuid())
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  make         String
  model        String
  year         Int?
  vin          String?       @unique
  licensePlate String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  workOrders   WorkOrder[]
}

model WorkOrder {
  id            String        @id @default(cuid())
  vehicle       Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId     String
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    String
  technician    StaffMember?  @relation("TechnicianWorkOrders", fields: [technicianId], references: [id])
  technicianId  String?
  status        WorkOrderStatus
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  serviceItems  ServiceItem[]
}

model ServiceCatalog {
  id          String         @id @default(cuid())
  code        String         @unique
  name        String
  description String?
  standardCost Decimal       
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  serviceItems ServiceItem[]
}

model ServiceItem {
  id               String          @id @default(cuid())
  workOrder        WorkOrder       @relation(fields: [workOrderId], references: [id])
  workOrderId      String
  serviceCatalog   ServiceCatalog? @relation(fields: [serviceCatalogId], references: [id])
  serviceCatalogId String?
  description      String
  cost             Decimal         
  createdAt        DateTime        @default(now())
}

model InventoryItem {
  id          String        @id @default(cuid())
  name        String
  sku         String?       @unique
  quantity    Int           @default(0)
  unitPrice   Decimal       
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum UserRole {
  CUSTOMER
  ADMIN
  MANAGER
  SERVICE_ADVISOR
  INVENTORY_MANAGER
  TECHNICIAN
}

enum StaffRole {
  ADMIN
  MANAGER
  SERVICE_ADVISOR
  INVENTORY_MANAGER
  TECHNICIAN
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
