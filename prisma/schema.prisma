generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Profile - extends Supabase auth.users
// Only stores additional profile data, not identity data
model UserProfile {
  id             String        @id @default(cuid())
  supabaseUserId String        @unique @db.Uuid // Links to auth.users.id (FK constraint added via migration)
  name           String?
  phone          String?
  profileImage   String?
  isRegistrationComplete Boolean @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  customer       Customer?
}

model StaffMember {
  id             String        @id @default(cuid())
  supabaseUserId String        @unique @db.Uuid // Links to auth.users.id (FK constraint added via migration)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  workOrders     WorkOrder[]   @relation("TechnicianWorkOrders")
  advisorWorkOrders WorkOrder[] @relation("AdvisorWorkOrders")
  appointments   Appointment[] @relation("CreatedAppointments")
  assignedAppointments Appointment[] @relation("AssignedAppointments")
}

// Customer table supports both app users and walk-ins
// For app users: userProfileId points to their UserProfile
// For walk-ins: userProfileId is NULL
model Customer {
  id            String        @id @default(cuid())
  userProfile   UserProfile?  @relation(fields: [userProfileId], references: [id])
  userProfileId String?       @unique // Nullable to support walk-ins
  name          String        @db.VarChar(255)
  email         String?       // Optional for walk-ins, not unique to allow duplicates
  phone         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  vehicles      Vehicle[]
  workOrders    WorkOrder[]
  appointments  Appointment[]
}

model Vehicle {
  id           String        @id @default(cuid())
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  make         String
  model        String
  year         Int?
  vin          String?       @unique
  licensePlate String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  workOrders   WorkOrder[]
  appointments Appointment[]
}

model WorkOrder {
  id              String         @id @default(cuid())
  workOrderNumber String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  customer        Customer       @relation(fields: [customerId], references: [id])
  customerId      String
  vehicle         Vehicle        @relation(fields: [vehicleId], references: [id])
  vehicleId       String

  appointment     Appointment?   @relation(fields: [appointmentId], references: [id])
  appointmentId   String?

  serviceAdvisor  StaffMember?   @relation("AdvisorWorkOrders", fields: [advisorId], references: [id])
  advisorId       String?
  technician      StaffMember?   @relation("TechnicianWorkOrders", fields: [technicianId], references: [id])
  technicianId    String?

  status          WorkOrderStatus
  jobType         JobType        @default(REPAIR)
  priority        JobPriority    @default(NORMAL)
  source          JobSource      @default(WALK_IN)
  complaint       String?
  odometerReading Int?
  warrantyStatus  WarrantyStatus @default(NONE)

  estimatedTotal  Decimal?       @db.Decimal(10,2)
  estimateNotes   String?
  estimateApproved Boolean       @default(false)

  subtotalLabour  Decimal?       @db.Decimal(10,2)
  subtotalParts   Decimal?       @db.Decimal(10,2)
  discountAmount  Decimal?       @db.Decimal(10,2)
  taxAmount       Decimal?       @db.Decimal(10,2)
  totalAmount     Decimal?       @db.Decimal(10,2)
  paidAmount      Decimal?       @db.Decimal(10,2) @default(0)

  // Relations to be defined
  serviceItems    ServiceItem[]
  inspections     WorkOrderInspection[]
  labourItems     WorkOrderLabour[]
  partsUsed       WorkOrderPart[]
  approvals       WorkOrderApproval[]
  qcChecks        WorkOrderQC[]
  attachments     WorkOrderAttachment[]
  payments        Payment[]
}

model ServiceCatalog {
  id          String         @id @default(cuid())
  code        String         @unique
  name        String
  description String?
  standardCost Decimal       
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  serviceItems ServiceItem[]
}

model ServiceItem {
  id               String          @id @default(cuid())
  workOrder        WorkOrder       @relation(fields: [workOrderId], references: [id])
  workOrderId      String
  serviceCatalog   ServiceCatalog? @relation(fields: [serviceCatalogId], references: [id])
  serviceCatalogId String?
  description      String
  cost             Decimal         
  createdAt        DateTime        @default(now())
}

model InventoryItem {
  id          String        @id @default(cuid())
  name        String
  sku         String?       @unique
  quantity    Int           @default(0)
  unitPrice   Decimal       
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum UserRole {
  CUSTOMER
  ADMIN
  MANAGER
  SERVICE_ADVISOR
  INVENTORY_MANAGER
  TECHNICIAN
}

enum StaffRole {
  ADMIN
  MANAGER
  SERVICE_ADVISOR
  INVENTORY_MANAGER
  TECHNICIAN
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  WAITING_FOR_PARTS
  QC_PENDING
  COMPLETED
  CANCELLED
}

enum JobType {
  REPAIR
  MAINTENANCE
  INSPECTION
  WARRANTY
  RECALL
}

enum JobPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum JobSource {
  WALK_IN
  APPOINTMENT
  PHONE
  ROADSIDE_ASSIST
}

enum WarrantyStatus {
  NONE
  MANUFACTURER
  EXTENDED
}

// Appointment management
model Appointment {
  id           String            @id @default(cuid())
  customer     Customer          @relation(fields: [customerId], references: [id])
  customerId   String
  vehicle      Vehicle           @relation(fields: [vehicleId], references: [id])
  vehicleId    String
  requestedAt  DateTime
  startTime    DateTime?
  endTime      DateTime?
  status       AppointmentStatus @default(PENDING)
  notes        String?
  serviceType  String?           // e.g., "Oil Change", "Brake Inspection", "General Service"
  priority     AppointmentPriority @default(NORMAL)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  workOrder    WorkOrder?
  createdBy    StaffMember?      @relation("CreatedAppointments", fields: [createdById], references: [id])
  createdById  String?
  assignedTo   StaffMember?      @relation("AssignedAppointments", fields: [assignedToId], references: [id])
  assignedToId String?
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
